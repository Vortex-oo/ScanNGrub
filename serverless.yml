service: ScanNGrub

frameworkVersion: '3'
provider:
  name: aws
  runtime: nodejs18.x
  environment:
    TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-table
    BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}-bucket
    MONGODB_URI: ${ssm:/ScanNGrub/MONGODB_URI}
    JWT_SECRET: ${ssm:/ScanNGrub/JWT_SECRET}

functions:
  # User Functions
  userLogin:
    handler: src/handlers/user.login
    events:
      - http:
          path: /user/login
          method: post
          cors: true

  userSignup:
    handler: src/handlers/user.signup
    events:
      - http:
          path: /user/signup
          method: post
          cors: true

  # Restaurant Functions
  listRestaurants:
    handler: src/handlers/restaurant.list
    events:
      - http:
          path: /restaurant/owner-dashboard
          method: post
          cors: true

  addRestaurant:
    handler: src/handlers/restaurant.add
    events:
      - http:
          path: /restaurant/add-restaurant
          method: post
          cors: true

  getRestaurantDetails:
    handler: src/handlers/restaurant.getDetails
    events:
      - http:
          path: /restaurant/details/{id}
          method: get
          cors: true

  # Menu Item Functions
  addMenuItem:
    handler: src/handlers/menuItem.add
    events:
      - http:
          path: /restaurant/{id}/menu-item
          method: post
          cors: true

  editMenuItem:
    handler: src/handlers/menuItem.edit
    events:
      - http:
          path: /restaurant/{id}/menu-item/{itemId}
          method: put
          cors: true

  deleteMenuItem:
    handler: src/handlers/menuItem.delete
    events:
      - http:
          path: /restaurant/{id}/menu-item/{itemId}
          method: delete
          cors: true

  scanRestaurant:
    handler: src/handlers/restaurant.scan
    events:
      - http:
          path: /restaurant/scan/{id}
          method: get
          cors: true

resources:
  Resources:
    RestaurantTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    QRBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE]
              AllowedOrigins: ['*']

custom:
  cors:
    origin: '*'
    headers:
      - Content-Type
      - Authorization
    allowCredentials: true